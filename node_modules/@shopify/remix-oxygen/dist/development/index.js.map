{"version":3,"sources":["../../src/event-logger.ts","../../src/server.ts"],"names":["createReactRouterRequestHandler"],"mappings":"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","file":"index.js","sourcesContent":["type H2OEvent = Parameters<NonNullable<typeof __H2O_LOG_EVENT>>[0];\n\nlet hasWarned = false;\n\n/**\n * @deprecated Only used with the classic Remix compiler\n */\nexport function createEventLogger(appLoadContext: Record<string, unknown>) {\n  const context = (appLoadContext || {}) as {\n    env?: Record<string, any>;\n    waitUntil?: (promise: Promise<any>) => void;\n  };\n\n  const eventLoggerService = context?.env?.H2O_LOG_EVENT as\n    | undefined\n    | {fetch: (req: Request) => Promise<Response>};\n\n  if (typeof eventLoggerService?.fetch !== 'function') return;\n\n  return ({\n    url,\n    endTime = Date.now(),\n    waitUntil = context?.waitUntil,\n    ...rest\n  }: H2OEvent) => {\n    const promise = Promise.resolve().then(() =>\n      eventLoggerService\n        .fetch(\n          new Request(url, {\n            method: 'POST',\n            body: JSON.stringify({\n              endTime,\n              ...rest,\n            }),\n          }),\n        )\n        .catch((error: Error) => {\n          if (!hasWarned) {\n            // This might repeat a lot of times due to\n            // the same issue, so we only warn once.\n            console.debug('Failed to log H2O event\\n', error.stack);\n            hasWarned = true;\n          }\n        }),\n    );\n\n    promise && waitUntil?.(promise);\n  };\n}\n","/// <reference types=\"@shopify/hydrogen\" />\nimport {\n  createRequestHandler as createReactRouterRequestHandler,\n  type AppLoadContext,\n  type ServerBuild,\n} from 'react-router';\nimport {createEventLogger} from './event-logger';\n\nconst originalErrorToString = Error.prototype.toString;\nError.prototype.toString = function () {\n  return this.stack || originalErrorToString.call(this);\n};\n\nexport function createRequestHandler<Context = unknown>({\n  build,\n  mode,\n  poweredByHeader = true,\n  getLoadContext,\n}: {\n  build: ServerBuild;\n  mode?: string;\n  poweredByHeader?: boolean;\n  getLoadContext?: (request: Request) => Promise<Context> | Context;\n}) {\n  const handleRequest = createReactRouterRequestHandler(build, mode);\n\n  return async (request: Request) => {\n    const method = request.method;\n\n    if ((method === 'GET' || method === 'HEAD') && request.body) {\n      return new Response(`${method} requests cannot have a body`, {\n        status: 400,\n      });\n    }\n\n    const url = new URL(request.url);\n\n    if (url.pathname.includes('//')) {\n      return new Response(null, {\n        status: 301,\n        headers: {\n          location: url.pathname.replace(/\\/+/g, '/'),\n        },\n      });\n    }\n\n    const context = getLoadContext\n      ? ((await getLoadContext(request)) as AppLoadContext)\n      : undefined;\n\n    if (process.env.NODE_ENV === 'development' && context) {\n      // Store logger in globalThis so it can be accessed from the worker.\n      // The global property must be different from the binding name,\n      // otherwise Miniflare throws an error when accessing it.\n      globalThis.__H2O_LOG_EVENT ??= createEventLogger(context);\n    }\n\n    const startTime = Date.now();\n\n    const response = await handleRequest(request, context);\n\n    if (poweredByHeader) {\n      response.headers.append('powered-by', 'Shopify, Hydrogen');\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      globalThis.__H2O_LOG_EVENT?.({\n        eventType: 'request',\n        url: request.url,\n        requestId: request.headers.get('request-id'),\n        purpose: request.headers.get('purpose'),\n        startTime,\n        responseInit: {\n          status: response.status,\n          statusText: response.statusText,\n          headers: Array.from(response.headers.entries()),\n        } satisfies ResponseInit,\n      });\n    }\n\n    return response;\n  };\n}\n\ntype StorefrontHeaders = {\n  requestGroupId: string | null;\n  buyerIp: string | null;\n  cookie: string | null;\n  purpose: string | null;\n};\n\nexport function getStorefrontHeaders(request: Request): StorefrontHeaders {\n  const headers = request.headers;\n  return {\n    requestGroupId: headers.get('request-id'),\n    buyerIp: headers.get('oxygen-buyer-ip'),\n    cookie: headers.get('cookie'),\n    purpose: headers.get('purpose'),\n  };\n}\n"]}