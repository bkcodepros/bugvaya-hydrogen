{"version":3,"sources":["../../src/server.ts"],"names":["originalErrorToString","createRequestHandler","build","mode","poweredByHeader","getLoadContext","handleRequest","createReactRouterRequestHandler","request","method","url","context","response","getStorefrontHeaders","headers"],"mappings":"kOAQA,IAAMA,CAAwB,CAAA,KAAA,CAAM,UAAU,QAC9C,CAAA,KAAA,CAAM,UAAU,QAAW,CAAA,UAAY,CACrC,OAAO,IAAA,CAAK,OAASA,CAAsB,CAAA,IAAA,CAAK,IAAI,CACtD,CAAA,CAEO,SAASC,CAAAA,CAAwC,CACtD,KAAAC,CAAAA,CAAAA,CACA,KAAAC,CACA,CAAA,eAAA,CAAAC,EAAkB,IAClB,CAAA,cAAA,CAAAC,CACF,CAKG,CAAA,CACD,IAAMC,CAAgBC,CAAAA,oBAAAA,CAAgCL,EAAOC,CAAI,CAAA,CAEjE,OAAcK,MAAAA,CAAAA,EAAqB,CACjC,IAAMC,EAASD,CAAQ,CAAA,MAAA,CAEvB,IAAKC,CAAW,GAAA,KAAA,EAASA,IAAW,MAAWD,GAAAA,CAAAA,CAAQ,KACrD,OAAO,IAAI,SAAS,CAAGC,EAAAA,CAAM,+BAAgC,CAC3D,MAAA,CAAQ,GACV,CAAC,CAAA,CAGH,IAAMC,CAAAA,CAAM,IAAI,GAAIF,CAAAA,CAAAA,CAAQ,GAAG,CAE/B,CAAA,GAAIE,EAAI,QAAS,CAAA,QAAA,CAAS,IAAI,CAC5B,CAAA,OAAO,IAAI,QAAS,CAAA,IAAA,CAAM,CACxB,MAAQ,CAAA,GAAA,CACR,QAAS,CACP,QAAA,CAAUA,CAAI,CAAA,QAAA,CAAS,QAAQ,MAAQ,CAAA,GAAG,CAC5C,CACF,CAAC,EAGGC,IAAAA,CAAAA,CAAUN,EACV,MAAMA,CAAAA,CAAeG,CAAO,CAC9B,CAAA,MAAA,CAWEI,CAAW,CAAA,MAAMN,CAAcE,CAAAA,CAAAA,CAASG,CAAO,EAErD,OAAIP,GACFQ,CAAS,CAAA,OAAA,CAAQ,OAAO,YAAc,CAAA,mBAAmB,EAkBpDA,CACT,CACF,CASO,SAASC,CAAAA,CAAqBL,EAAqC,CACxE,IAAMM,EAAUN,CAAQ,CAAA,OAAA,CACxB,OAAO,CACL,eAAgBM,CAAQ,CAAA,GAAA,CAAI,YAAY,CACxC,CAAA,OAAA,CAASA,EAAQ,GAAI,CAAA,iBAAiB,EACtC,MAAQA,CAAAA,CAAAA,CAAQ,IAAI,QAAQ,CAAA,CAC5B,QAASA,CAAQ,CAAA,GAAA,CAAI,SAAS,CAChC,CACF","file":"index.js","sourcesContent":["/// <reference types=\"@shopify/hydrogen\" />\nimport {\n  createRequestHandler as createReactRouterRequestHandler,\n  type AppLoadContext,\n  type ServerBuild,\n} from 'react-router';\nimport {createEventLogger} from './event-logger';\n\nconst originalErrorToString = Error.prototype.toString;\nError.prototype.toString = function () {\n  return this.stack || originalErrorToString.call(this);\n};\n\nexport function createRequestHandler<Context = unknown>({\n  build,\n  mode,\n  poweredByHeader = true,\n  getLoadContext,\n}: {\n  build: ServerBuild;\n  mode?: string;\n  poweredByHeader?: boolean;\n  getLoadContext?: (request: Request) => Promise<Context> | Context;\n}) {\n  const handleRequest = createReactRouterRequestHandler(build, mode);\n\n  return async (request: Request) => {\n    const method = request.method;\n\n    if ((method === 'GET' || method === 'HEAD') && request.body) {\n      return new Response(`${method} requests cannot have a body`, {\n        status: 400,\n      });\n    }\n\n    const url = new URL(request.url);\n\n    if (url.pathname.includes('//')) {\n      return new Response(null, {\n        status: 301,\n        headers: {\n          location: url.pathname.replace(/\\/+/g, '/'),\n        },\n      });\n    }\n\n    const context = getLoadContext\n      ? ((await getLoadContext(request)) as AppLoadContext)\n      : undefined;\n\n    if (process.env.NODE_ENV === 'development' && context) {\n      // Store logger in globalThis so it can be accessed from the worker.\n      // The global property must be different from the binding name,\n      // otherwise Miniflare throws an error when accessing it.\n      globalThis.__H2O_LOG_EVENT ??= createEventLogger(context);\n    }\n\n    const startTime = Date.now();\n\n    const response = await handleRequest(request, context);\n\n    if (poweredByHeader) {\n      response.headers.append('powered-by', 'Shopify, Hydrogen');\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      globalThis.__H2O_LOG_EVENT?.({\n        eventType: 'request',\n        url: request.url,\n        requestId: request.headers.get('request-id'),\n        purpose: request.headers.get('purpose'),\n        startTime,\n        responseInit: {\n          status: response.status,\n          statusText: response.statusText,\n          headers: Array.from(response.headers.entries()),\n        } satisfies ResponseInit,\n      });\n    }\n\n    return response;\n  };\n}\n\ntype StorefrontHeaders = {\n  requestGroupId: string | null;\n  buyerIp: string | null;\n  cookie: string | null;\n  purpose: string | null;\n};\n\nexport function getStorefrontHeaders(request: Request): StorefrontHeaders {\n  const headers = request.headers;\n  return {\n    requestGroupId: headers.get('request-id'),\n    buyerIp: headers.get('oxygen-buyer-ip'),\n    cookie: headers.get('cookie'),\n    purpose: headers.get('purpose'),\n  };\n}\n"]}