import { ServerBuild } from 'react-router';
export { ActionFunction, ActionFunctionArgs, AppLoadContext, Cookie, CookieOptions, CookieParseOptions, CookieSerializeOptions, CookieSignatureOptions, EntryContext, ErrorResponse, HandleDataRequestFunction, HandleDocumentRequestFunction, HandleErrorFunction, HeadersArgs, HeadersFunction, HtmlLinkDescriptor, LinkDescriptor, LinksFunction, LoaderFunction, LoaderFunctionArgs, MetaArgs, MetaDescriptor, MetaFunction, PageLinkDescriptor, RequestHandler, ServerBuild, ServerEntryModule, Session, SessionData, SessionIdStorageStrategy, SessionStorage, createCookie, createCookieSessionStorage, createMemorySessionStorage, createSession, createSessionStorage, data, isCookie, isSession, redirect, redirectDocument } from 'react-router';

declare function createRequestHandler<Context = unknown>({ build, mode, poweredByHeader, getLoadContext, }: {
    build: ServerBuild;
    mode?: string;
    poweredByHeader?: boolean;
    getLoadContext?: (request: Request) => Promise<Context> | Context;
}): (request: Request) => Promise<Response>;
type StorefrontHeaders = {
    requestGroupId: string | null;
    buyerIp: string | null;
    cookie: string | null;
    purpose: string | null;
};
declare function getStorefrontHeaders(request: Request): StorefrontHeaders;

export { createRequestHandler, getStorefrontHeaders };
